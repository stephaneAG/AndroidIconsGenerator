#! /bin/bash

#  nF Android Icons Generator [ codename: droidCons / droicons ? ;p ]

#  Simple bash script to automate the procedure of generating CUSTOM images that resides in the @Drawable <...>hdpi directories of Android projects
#  Nb: by the time I write these lines, it seems Eclipse/ADT does NOT handle scaling/resizing images without giving them .. let's call that a "special effect" :/
#  Though, this is exactly what this script aims at :D

#  The future ?
#  
#  v0.0.2: "-project" argument may be looked for, & if found the second argument 'll be understood as the path to an Android project, & the files 'll be copied with the same name to the directory they belong to
#  v0.0.3: maybe a simple GUI wrapper that allows drag & drop of the Android project directory as well as some image files to be processed
#      v?: "who knows ?" :)

# StephaneAG - 2014


### hlprs ###

## bash ascii color codes hlprs ##

# background colors
# default ( black )
bacc_bckgrnd_def="\e[49m"
# magenta
bacc_bckgrnd_magenta="\e[45m"
# cyan
bacc_bckgrnd_cyan="\e[46m"
# dark grey
bacc_bckgrnd_drkgry="\e[100m"
# text colors
# default ( white )
bacc_txt_def="\e[39m"
# magenta
bacc_txt_magenta="\e[35m"
# cyan
bacc_txt_cyan="\e[36m"
# light blue
bacc_txt_lghtbl="\e[94m"
# dark grey
bacc_txt_drkgry="\e[30m"

## texts ##
txt_filename="filename"
txt_genfor="drawable filename generated"
txt_genas="generated as"


## script start ##

# get the file name of the file(s) passed as arguments
# get the filename without the extension
# copy file passed as param once, add 'drawable-xxhdpi' + its original extension & resized to 96x96
# copy that clone, as drawable-xhdpi' + its original extension & resize it 66% of that clone
# copy that clone, as drawable-hdpi' + its original extension & resize it 50% of the 1st clone
# copy that clone, as drawable-mhdpi' + its original extension & resize it 33% of the 1st clone



## intro ##
echo # a littl' spacer
echo -e "$bacc_txt_lghtbl     [$bacc_txt_def Android Icon Generator v0.0.1 $bacc_txt_lghtbl]$bacc_txt_def"



#filename="$1" # works fine for one file ;D

# loop over the files passed as argument
for filename in "$@"
do
  
  # some space in case we have multiple files ;)
  echo
  echo
  # 0: echo the filename
  #echo -e "$txt_filename: $filename" # n&b vers.
  #echo -e "$bacc_bckgrnd_drkgry$txt_filename:$bacc_bckgrnd_def $filename" # ascii-colored vers.
 
  # 1: get filename
  #filenameWithoutExtension=$(basename "$filename" '.png') # nb: works
  filenameWithoutExtension="${filename%.*}"
  #echo -e "$txt_filename without extension: $filenameWithoutExtension"

  # 2: get extension
  extensionWithoutFilename="${filename##*.}"
  #echo -e "extension without $txt_filename: $extensionWithoutFilename"


  # 0/1/2bis: display complete file name
  echo -e "$bacc_txt_lghtbl [$bacc_txt_def $bacc_txt_lghtbl  file:$bacc_txt_def $filename   $bacc_txt_lghtbl]$bacc_txt_def"
  echo
  ## Nb: by now, just generate file names
  ##     => later on, we could ( & it'd be better ) check if the corresponding dirs exist ( or else create them ) before copying the files generated WITH THE SAME FILE NAMES to their respective directories

  # 3: compose the file names ( later, will be modified & use a directories names )
  
  # xxhdpi: first drawable name                                               => @Drawable-xxhdpi
  xxhdpiFilename="$filenameWithoutExtension-xxhdpi.$extensionWithoutFilename"
  echo -e " [ $bacc_txt_lghtbl$bacc_txt_cyan@Info$bacc_txt_def ]$bacc_txt_cyan      xxhdpi $txt_genfor:$bacc_txt_def $xxhdpiFilename"

  #  xhdpi: second drawable name                                              => @Drawable-xhdpi
  xhdpiFilename="$filenameWithoutExtension-xhdpi.$extensionWithoutFilename"
  echo -e " [ $bacc_txt_lghtbl$bacc_txt_cyan@Info$bacc_txt_def ]$bacc_txt_cyan       xhdpi $txt_genfor:$bacc_txt_def $xhdpiFilename"

  #  mhdpi: third first drawable name                                         => @Drawable-mhdpi
  mhdpiFilename="$filenameWithoutExtension-mhdpi.$extensionWithoutFilename"
  echo -e " [ $bacc_txt_lghtbl$bacc_txt_cyan@Info$bacc_txt_def ]$bacc_txt_cyan       mhdpi $txt_genfor:$bacc_txt_def $mhdpiFilename"

  #  hdpi: fourth first drawable name                                         => @Drawable-hdpi
  hdpiFilename="$filenameWithoutExtension-hdpi.$extensionWithoutFilename"
  echo -e " [ $bacc_txt_lghtbl$bacc_txt_cyan@Info$bacc_txt_def ]$bacc_txt_cyan        hdpi $txt_genfor:$bacc_txt_def $hdpiFilename"

  # as 'ldpi' is not generated by ADT, & as it's targetting "lowest resolutions possible ever", we'll skip it for now ;p


  # 4: clone & resize

  # xxhdpi: 96x96, whatever the dimensions of the original file  [ R hardcoded:  convert -resize 96xC96 cameraicon.png cameraicon-xxhdpi.png  ]
  convert -resize 96x96 $filename $xxhdpiFilename    # create the xxhdpi file from the original
  echo -e " [ $bacc_txt_lghtbl$bacc_txt_magenta@Drawable$bacc_txt_def ] $bacc_txt_magenta xxhdpi $txt_genas:$bacc_txt_def $xxhdpiFilename"

  #  xhdpi: 66% the size of the xxhdpi                           [ R hardcoded:  convert -resize 66% cameraicon-xxhdpi.png cameraicon-xhdpi.png  ]
  convert -resize 66% $xxhdpiFilename $xhdpiFilename  # create the xhdpi file from the xxhdpi version
  echo -e "$bacc_txt_drkgry$bacc_bckgrnd_magenta@Drawable$bacc_bckgrnd_def $bacc_txt_magenta  xhdpi $txt_genas:$bacc_txt_def $xhdpiFilename"

  #  mhdpi: 50% the size of the xxhdpi                           [ R hardcoded:  convert -resize 50% cameraicon-xxhdpi.png cameraicon-mhdpi.png  ]
  convert -resize 50% $xxhdpiFilename $mhdpiFilename  # create the mhdpi file from the xxhdpi version
  echo -e "$bacc_txt_drkgry$bacc_bckgrnd_magenta@Drawable$bacc_bckgrnd_def $bacc_txt_magenta  mhdpi $txt_genas:$bacc_txt_def $mhdpiFilename"

  #   hdpi: 33% the size of the xxhdpi                           [ R hardcoded:  convert -resize 33% cameraicon-xxhdpi.png cameraicon-hdpi.png  ]
  convert -resize 33% $xxhdpiFilename $hdpiFilename  # create the hdpi file from the xxhdpi version
  echo -e "$bacc_txt_drkgry$bacc_bckgrnd_magenta@Drawable$bacc_bckgrnd_def $bacc_txt_magenta   hdpi $txt_genas:$bacc_txt_def $hdpiFilename"


done

#echo # another littl' spacer

## script end ##

# helpers



##
# echo "filename: $filename" # echo the filename
# local filenameWithoutPath=$(basename "$filename")
# echo "filename without path: $filenameWithoutPath"
# local filenameWithoutExtension="${filename##*/}"
# echo "filename without extension: $filenameWithoutExtension
# local extensionWithoutFilename="${filename##*.}"
# echo "filename without extension: $filenameWithoutExtension"
